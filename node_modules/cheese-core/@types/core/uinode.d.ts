import { Callback } from "types";
type uiObj = {
    text: (text: string) => uiObj;
    _text: string;
    _id: string;
    id: (text: string) => uiObj;
    desc: (text: string) => uiObj;
    _desc: string;
    clz: (text: string) => uiObj;
    _clz: string;
    pkg: (text: string) => uiObj;
    _pkg: string;
    bounds: (text: string) => uiObj;
    _bounds: string;
    isClickable: (text: string) => uiObj;
    _isClickable: boolean;
    and: boolean;
    or: boolean;
};
interface Bounds {
    left: number;
    top: number;
    bottom: number;
    right: number;
}
export default class uinode {
    uiobj: uiObj;
    obj: any | null;
    length: any | null;
    constructor();
    find(value?: number): boolean;
    findOn(value?: number): this;
    get(value: number, name: string, ...args: string[]): string;
    getText(value?: number): string;
    getId(value?: number): string;
    getDesc(value?: number): string;
    getPkg(value?: number): string;
    getClz(value?: number): string;
    getBounds(value?: number): Bounds | null;
    getParent(value?: number): this;
    getChildren(value?: number): this;
    static clearNodeCacheAsync(): Promise<boolean>;
    static clearNodeCache(): boolean;
    forEachNodeAsync(callback: Callback): Promise<this>;
    forEachNode(callback: Callback): this;
    clickAsync(value?: number): Promise<boolean>;
    click(value?: number): boolean;
    globalLongClickAsync(value?: number): Promise<boolean>;
    globalLongClick(value?: number): boolean;
    globalClickAsync(value?: number): Promise<boolean>;
    globalClick(value?: number): boolean;
    longClickAsync(value?: number): Promise<boolean>;
    longClick(value?: number): boolean;
    doubleClickAsync(value?: number): Promise<boolean>;
    doubleClick(value?: number): boolean;
    tryLongClickAsync(value?: number): Promise<boolean>;
    tryLongClick(value?: number): boolean;
    tryClickAsync(value?: number): Promise<boolean>;
    tryClick(value?: number): boolean;
}
export {};
