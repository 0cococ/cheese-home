export default class point {
    constructor() {
    }
    static swipeToPointAsync(sx, sy, ex, ey, dur) {
        return PointApi.swipeToPointAsync(sx, sy, ex, ey, dur);
    }
    static swipeToPoint(sx, sy, ex, ey, dur) {
        return PointApi.swipeToPoint(sx, sy, ex, ey, dur);
    }
    static clickPointAsync(x, y) {
        return PointApi.clickPointAsync(x, y);
    }
    static clickPoint(x, y) {
        return PointApi.clickPoint(x, y);
    }
    static longClickPointAsync(x, y) {
        return PointApi.longClickPointAsync(x, y);
    }
    static longClickPoint(x, y) {
        return PointApi.longClickPoint(x, y);
    }
    static touchDownAsync(x, y) {
        return PointApi.touchDown(x, y);
    }
    static touchDown(x, y) {
        return PointApi.touchDown(x, y);
    }
    static touchMoveAsync(x, y) {
        return PointApi.touchMove(x, y);
    }
    static touchMove(x, y) {
        return PointApi.touchMove(x, y);
    }
    static touchUpAsync() {
        return PointApi.touchUpAsync();
    }
    static touchUp() {
        return PointApi.touchUp();
    }
    static gestureAsync(dur, array) {
        return PointApi.gestureAsync(dur, array);
    }
    static gesture(dur, array) {
        return PointApi.gesture(dur, array);
    }
    static superSwipeToPoint(sx, sy, ex, ey, dur, xShake, yShake) {
        let myArray = [];
        let maxValue = ex;
        let currentCoordinate = 0;
        myArray.push(sx);
        myArray.push(sy);
        while (maxValue > 0) {
            let randomValue = getRandomInt(maxValue);
            maxValue -= randomValue;
            currentCoordinate += randomValue;
            // console.log("累计坐标:", currentCoordinate);
            myArray.push(currentCoordinate);
            myArray.push(getRandomAdjustment(ey, yShake));
        }
        return PointApi.gesture(dur, ConvertersApi.pairArray(myArray.join(',')));
        function getRandomAdjustment(value, maxAdjustment = 50) {
            const adjustment = Math.floor(Math.random() * (maxAdjustment * 2 + 1)) - maxAdjustment;
            return value + adjustment;
        }
        function getRandomInt(maxValue) {
            let randomValue = 0;
            while (randomValue === 0) {
                randomValue = Math.floor(Math.random() * (maxValue + 1)); // 生成随机数
            }
            return randomValue;
        }
    }
}
