export default class uinode {
    uiobj;
    obj;
    length;
    constructor() {
        this.obj = null;
        this.length = 0;
    }
    find(value = 0) {
        return this.obj !== null && this.obj !== undefined && this.obj !== "null" && this.obj.length > 0 && this.obj.length >= value + 1;
    }
    findOn(value = 0) {
        if (this.obj !== null && this.obj !== undefined && this.obj !== "null" && this.obj.length > 0 && this.obj.length >= value + 1) {
            return this;
        }
        else {
            throw new Error("Node not found");
        }
    }
    get(value, name, ...args) {
        return UiNodeApi.get(this.obj[value], name, args);
    }
    getText(value = 0) {
        return this.get(value, "getText")[0].split("~")[1];
    }
    getId(value = 0) {
        return this.get(value, "getId")[0].split("~")[1];
    }
    getDesc(value = 0) {
        return this.get(value, "desc")[0].split("~")[1];
    }
    getPkg(value = 0) {
        return this.get(value, "getPackageName")[0].split("~")[1];
    }
    getClz(value = 0) {
        value = value || 0;
        return this.get(value, "getClassName")[0].split("~")[1];
    }
    getBounds(value = 0) {
        const rectString = this.get(value, "getBounds")[0].split("~")[1];
        const regex = /Rect\((\d+), (\d+) - (\d+), (\d+)\)/;
        const matches = rectString.match(regex);
        if (matches) {
            return {
                left: Number(matches[1]),
                top: Number(matches[2]),
                bottom: Number(matches[3]),
                right: Number(matches[4])
            };
        }
        else {
            console.error("Invalid rect string format");
            return null;
        }
    }
    getParent(value = 0) {
        this.obj = this.get(value, "getParent");
        return this;
    }
    getChildren(value = 0) {
        this.obj = this.get(value, "getChildren");
        return this;
    }
    static clearNodeCacheAsync() {
        return UiNodeApi.clearNodeCacheAsync();
    }
    static clearNodeCache() {
        return UiNodeApi.clearNodeCache();
    }
    forEachNodeAsync(callback) {
        let id = `${Date.now().toString(36)}${Math.random().toString(36).substring(2, 10)}`;
        return new Promise((resolve, reject) => {
            try {
                UiNodeApi.forEachNodeAsync(id, callback)
                    .then(data => {
                    this.obj = data;
                    this.length = this.obj.length;
                    resolve(this);
                })
                    .catch(reject);
            }
            catch (error) {
                reject(error);
            }
        });
    }
    forEachNode(callback) {
        let id = `${Date.now().toString(36)}${Math.random().toString(36).substring(2, 10)}`;
        this.obj = UiNodeApi.forEachNode(id, callback);
        this.length = this.obj.length;
        return this;
    }
    clickAsync(value = 0) {
        return UiNodeApi.clickAsync(this.obj[value]);
    }
    click(value = 0) {
        return UiNodeApi.click(this.obj[value]);
    }
    globalLongClickAsync(value = 0) {
        return UiNodeApi.globalLongClickAsync(this.obj[value]);
    }
    globalLongClick(value = 0) {
        return UiNodeApi.globalLongClick(this.obj[value]);
    }
    globalClickAsync(value = 0) {
        return UiNodeApi.globalClickAsync(this.obj[value]);
    }
    globalClick(value = 0) {
        return UiNodeApi.globalClick(this.obj[value]);
    }
    longClickAsync(value = 0) {
        return UiNodeApi.longClickAsync(this.obj[value]);
    }
    longClick(value = 0) {
        return UiNodeApi.longClick(this.obj[value]);
    }
    doubleClickAsync(value = 0) {
        return UiNodeApi.doubleClickAsync(this.obj[value]);
    }
    doubleClick(value = 0) {
        return UiNodeApi.doubleClick(this.obj[value]);
    }
    tryLongClickAsync(value = 0) {
        return UiNodeApi.tryLongClickAsync(this.obj[value]);
    }
    tryLongClick(value = 0) {
        return UiNodeApi.tryLongClick(this.obj[value]);
    }
    tryClickAsync(value = 0) {
        return UiNodeApi.tryClickAsync(this.obj[value]);
    }
    tryClick(value = 0) {
        return UiNodeApi.tryClick(this.obj[value]);
    }
}
