export default class base {
    constructor() {
    }
    static sleepAsync(tim) {
        return BaseApi.sleepAsync(tim);
    }
    static sleep(tim) {
        return BaseApi.sleep(tim);
    }
    static toastAsync(message) {
        return BaseApi.toastAsync(message);
    }
    static toast(message) {
        return BaseApi.toast(message);
    }
    static exitAsync() {
        return BaseApi.exitAsync();
    }
    static exit() {
        return BaseApi.exit();
    }
    static runJSAsync(nodeName, js) {
        return BaseApi.runJSAsync(nodeName, js);
    }
    static runJS(nodeName, js) {
        return BaseApi.runJS(nodeName, js);
    }
    static runOnUiAsync(callback) {
        return BaseApi.runOnUiAsync(callback);
    }
    static runOnUi(callback) {
        return BaseApi.runOnUi(callback);
    }
    static startActivityAsync(activityId, iActivity) {
        return BaseApi.startActivityAsync(activityId, iActivity);
    }
    static startActivity(activityId, iActivity) {
        return BaseApi.startActivity(activityId, iActivity);
    }
    static pythonLogAsync() {
        return BaseApi.pythonLogAsync();
    }
    static pythonLog() {
        return BaseApi.pythonLog();
    }
    // public static pairArray(...data: number[]): Array<Pair<number,number>>
    // public static pairArray(data: string): Array<Pair<number,number>>
    // public static pairArray(...args: any[]): Array<Pair<number,number>>  {
    //     if (typeof args[0] === 'string') {
    //         const data = args[0] as string;
    //         return  ConvertersApi.pairArray(...data)
    //     }else{
    //         const data = args as number[];
    //         return  ConvertersApi.pairArray(...data)
    //     }
    // }
    static makeJsb(jsString) {
        try {
            const vm = require('vm');
            let script = new vm.Script(jsString, { produceCachedData: true });
            return script.cachedData;
        }
        catch (e) {
            throw new Error(e.message);
        }
    }
    static runJsb(jsbString) {
        try {
            const vm = require('vm');
            var l = jsbString.slice(8, 12).reduce(function (sum, number, power) {
                return sum += number * Math.pow(256, power);
            });
            var dummyCode = " ".repeat(l);
            let script = new vm.Script(dummyCode, { cachedData: jsbString });
            script.runInThisContext();
        }
        catch (e) {
            throw new Error(e.message);
        }
    }
    static Rect(left, top, bottom, right) {
        return `Rect(${left}, ${top} - ${bottom}, ${right})`;
    }
    static Rect1(left, top, bottom, right) {
        return BaseApi.Rect(left, top, bottom, right);
    }
    static releaseAsync(obj) {
        return BaseApi.releaseAsync(obj);
    }
    static release(obj) {
        return BaseApi.release(obj);
    }
}
