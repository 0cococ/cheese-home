declare var BaseApi: any
import {Callback, Rect} from "types";

declare var require: any;
export default class base {
    constructor() {
    }

    public static sleepAsync(tim: number): Promise<void> {
        return BaseApi.sleepAsync(tim);
    }

    public static sleep(tim: number): void {
        return BaseApi.sleep(tim);
    }

    public static toastAsync(message: string): Promise<void> {
        return BaseApi.toastAsync(message);
    }

    public static toast(message: string): void {
        return BaseApi.toast(message);
    }

    public static exitAsync(): Promise<void> {
        return BaseApi.exitAsync();
    }

    public static exit(): void {
        return BaseApi.exit();
    }

    public static runJSAsync(nodeName: string, js: string): Promise<any> {
        return BaseApi.runJSAsync(nodeName, js);
    }

    public static runJS(nodeName: string, js: string): any {
        return BaseApi.runJS(nodeName, js);
    }

    public static runOnUiAsync(callback: Callback): Promise<void> {
        return BaseApi.runOnUiAsync(callback);
    }


    public static runOnUi(callback: Callback): void {
        return BaseApi.runOnUi(callback);
    }

    public static startActivityAsync(activityId: string, iActivity: Callback): Promise<void> {
        return BaseApi.startActivityAsync(activityId, iActivity);
    }

    public static startActivity(activityId: string, iActivity: Callback): void {
        return BaseApi.startActivity(activityId, iActivity);
    }

    public static pythonLogAsync(): Promise<void> {
        return BaseApi.pythonLogAsync();
    }

    public static pythonLog(): void {
        return BaseApi.pythonLog();
    }
    // public static pairArray(...data: number[]): Array<Pair<number,number>>
    // public static pairArray(data: string): Array<Pair<number,number>>
    // public static pairArray(...args: any[]): Array<Pair<number,number>>  {
    //     if (typeof args[0] === 'string') {
    //         const data = args[0] as string;
    //         return  ConvertersApi.pairArray(...data)
    //     }else{
    //         const data = args as number[];
    //         return  ConvertersApi.pairArray(...data)
    //     }
    // }



    public static makeJsb(jsString: string): string {
        try {
            const vm = require('vm');
            let script = new vm.Script(jsString, {produceCachedData: true});
            return script.cachedData;
        } catch (e) {
            throw new Error((e as Error).message);
        }
    }

    public static runJsb(jsbString: any): void {
        try {
            const vm = require('vm');
            var l = jsbString.slice(8, 12).reduce(function (sum, number, power) {
                return sum += number * Math.pow(256, power);
            });
            var dummyCode = " ".repeat(l);
            let script = new vm.Script(dummyCode, {cachedData: jsbString});
            script.runInThisContext()
        } catch (e) {
            throw new Error((e as Error).message);
        }

    }
    public static Rect(left: number, top: number, bottom: number, right: number): string {
        return `Rect(${left}, ${top} - ${bottom}, ${right})`;
    }
    public static Rect1(left: number, top: number, bottom: number, right: number): any {
        return BaseApi.Rect(left,top,bottom,right);
    }

    public static releaseAsync(obj: any): Promise<boolean> {
        return BaseApi.releaseAsync(obj);
    }
    public static release(obj:any): boolean {
        return BaseApi.release(obj);
    }
}

