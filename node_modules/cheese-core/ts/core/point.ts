declare var PointApi: any
declare var ConvertersApi: any
import { Pair} from "types";
export default class point {
    constructor() {
    }

    public static swipeToPointAsync(sx: number, sy: number, ex: number, ey: number, dur: number): Promise<boolean> {
        return PointApi.swipeToPointAsync(sx, sy, ex, ey, dur);
    }

    public static swipeToPoint(sx: number, sy: number, ex: number, ey: number, dur: number): boolean {
        return PointApi.swipeToPoint(sx, sy, ex, ey, dur);
    }
    public static clickPointAsync(x: number, y: number): Promise<boolean> {
        return PointApi.clickPointAsync(x,y);
    }

    public static clickPoint(x: number, y: number): boolean {
        return PointApi.clickPoint(x,y);
    }

    public static longClickPointAsync(x: number, y: number): Promise<boolean> {
        return PointApi.longClickPointAsync(x,y);
    }

    public static longClickPoint(x: number, y: number): boolean {
        return PointApi.longClickPoint(x,y);
    }

    public static touchDownAsync(x: number, y: number): Promise<boolean> {
        return PointApi.touchDown(x,y);
    }

    public static touchDown(x: number, y: number): boolean {
        return PointApi.touchDown(x,y);
    }
    public static touchMoveAsync(x: number, y: number): Promise<boolean> {
        return PointApi.touchMove(x,y);
    }

    public static touchMove(x: number, y: number): boolean {
        return PointApi.touchMove(x,y);
    }

    public static touchUpAsync(): Promise<boolean> {
        return PointApi.touchUpAsync();
    }

    public static touchUp(): boolean {
        return PointApi.touchUp();
    }

    public static gestureAsync(dur:number,array:Array<Pair<number,number>>): Promise<boolean> {
        return PointApi.gestureAsync(dur,array);
    }

    public static gesture(dur:number,array:Array<Pair<number,number>>): boolean {
        return PointApi.gesture(dur,array);
    }

    public static superSwipeToPoint(sx: number, sy: number, ex: number, ey: number, dur: number,xShake:number,yShake:number): boolean {
        let myArray = [];
        let maxValue = ex;
        let currentCoordinate = 0;
        myArray.push(sx)
        myArray.push(sy)
        while (maxValue > 0) {
            let randomValue = getRandomInt(maxValue);
            maxValue -= randomValue;
            currentCoordinate += randomValue;
            // console.log("累计坐标:", currentCoordinate);
            myArray.push(currentCoordinate)
            myArray.push(getRandomAdjustment(ey,yShake))
        }
        return PointApi.gesture(dur,ConvertersApi.pairArray(myArray.join(',')))
        function getRandomAdjustment(value: number, maxAdjustment: number = 50): number {
            const adjustment = Math.floor(Math.random() * (maxAdjustment * 2 + 1)) - maxAdjustment;
            return value + adjustment;
        }
        function getRandomInt(maxValue: number): number {
            let randomValue = 0;
            while (randomValue === 0) {
                randomValue = Math.floor(Math.random() * (maxValue + 1)); // 生成随机数
            }
            return randomValue;
        }
    }
}